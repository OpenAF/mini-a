# Author: Nuno Aguiar
help:
  text   : |
    A mini autonomous agent that uses an LLM (use OAF_MODEL environment variable) and shell commands to achieve a specified goal in small steps.

    Examples:
      # Single MCP connection
      ojob mini-a.yaml goal="..." mcp="(cmd: 'docker run --rm -i mcp/dockerhub', timeout: 5000)" rpm=20
      ojob mini-a.yaml goal="..." mcp="(cmd: 'docker run --rm -i mcp/wikipedia-mcp', timeout: 5000)" rpm=20 knowledge="give final answer in markdown"
      
      # Multiple MCP connections
      ojob mini-a.yaml goal="..." mcp="[(cmd: 'docker run --rm -i mcp/dockerhub', timeout: 5000) | (cmd: 'docker run --rm -i mcp/wikipedia-mcp', timeout: 5000)]" rpm=20
      
  expects: 
  - name     : goal
    desc     : Goal for the agent to achieve
    example  : aValueExample
    mandatory: true
  - name     : mcp
    desc     : A MCP connection object (or array of objects) using OpenAF's $mcp() function in SLON or JSON format
    example  : "(url: 'http://127.0.0.1:17879/mcp', type: remote, debug: false)"
    mandatory: false
  - name     : mcplazy
    desc     : Initialize MCP connections lazily on first use instead of during startup
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : verbose
    desc     : Whether to print detailed logs
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : maxsteps
    desc     : Maximum consecutive steps without a successful action before forcing a final response
    example  : "15"
    mandatory: false
  - name     : rpm
    desc     : Maximum number of LLM requests per minute
    example  : "20"
    mandatory: false
  - name     : tpm
    desc     : Maximum number of LLM tokens per minute across prompt and completion
    example  : "80000"
    mandatory: false
  - name     : rtm
    desc     : Legacy alias for rpm (requests per minute)
    example  : "20"
    mandatory: false
  - name     : readwrite
    desc     : Allow read-write commands without confirmation (dangerous)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : checkall
    desc     : Check all commands for banned operations (may ask for confirmation)
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : useshell
    desc     : "Whether to allow shell commands (default: false)"
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : shell
    desc     : Prefix applied to every shell command (requires useshell=true)
    example  : "sandbox-exec -f /path/to/profile.sb"
    mandatory: false
  - name     : shellallow
    desc     : Comma-separated list of banned commands to allow explicitly
    example  : "curl,wget"
    mandatory: false
  - name     : shellallowpipes
    desc     : Allow pipes, redirection and shell control operators
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : shellbanextra
    desc     : Additional comma-separated commands to ban
    example  : "lsblk,ifconfig"
    mandatory: false
  - name     : outfile
    desc     : Output file path to save the final answer (if not provided, prints to console)
    example  : "/path/to/output.txt"
    mandatory: false
  - name     : knowledge
    desc     : Additional knowledge or context to provide to the agent (in the form of a string or a path to a text file)
    example  : "You have access to a Linux shell and can run commands like ls, cat, grep, wc, curl, etc."
    mandatory: false
  - name     : conversation
    desc     : Conversation history file to provide to the agent
    example  : "/path/to/conversation.json"
    mandatory: false
  - name     : libs
    desc     : Comma-separated list of additional OJob libraries to load (e.g., "lib1,lib2")
    example  : "lib1,lib2"
    mandatory: false
  - name     : maxcontext
    desc     : Maximum context size in tokens (if exceeded, conversation will be summarized)
    example  : "200000"
    mandatory: false
  - name     : raw
    desc     : Whether to return raw output without formatting
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : debug
    desc     : Enable debug mode
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : shellbatch
    desc     : Run in batch mode without prompting for command execution approval
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : toolcachettl
    desc     : Default cache TTL in milliseconds for MCP tool results
    example  : "600000"
    mandatory: false
  - name     : usetools
    desc     : Register MCP tools directly on the model instead of expanding the prompt with schemas
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : useutils
    desc     : Automatically register Mini File Tool utilities as an MCP connection
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : mcpdynamic
    desc     : Enable dynamic tool selection instead of registering all MCP tools (analyzes goal to select relevant tools)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : useplanning
    desc     : Enable task planning updates (agent mode only)
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : chatbotmode
    desc     : Run Mini-A in conversational chatbot mode without agent planning
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : rules
    desc     : Custom rules or instructions for the agent (JSON or SLON array of strings)
    example  : '["Always provide detailed explanations", "Use concise language"]'
    mandatory: false
  - name     : state
    desc     : Initial state data to provide to the agent as structured JSON/SLON
    example  : '{"current_task": "analysis", "progress": 0}'
    mandatory: false
  - name     : format
    desc     : Output format for the final answer (md or json)
    example  : "json"
    mandatory: false
  - name     : auditch
    desc     : SLON/JSON definition of an audit channel to record agent activity
    example  : "(type: file, options: (file: '/tmp/mini-a-audit.log'))"
    mandatory: false

todo:
- MiniAgent

ojob:
  opacks      :
  - openaf: 20250725
  - mini-a
  catch       : printErrnl("[" + job.name + "] "); printErr(exception)
  logToConsole: false   # to change when finished
  loadLibs    :
  - mini-a.js

jobs:
# ----------------
- name : CheckEnv
  exec : | #js
    var hasModelOverride = isDef(args) && isDef(args.model) && ((isString(args.model) && args.model.trim().length > 0) || isMap(args.model))
    if (isUnDef(getEnv("OAF_MODEL")) && !hasModelOverride) {
      throw "OAF_MODEL environment variable not set. Please export OAF_MODEL or provide model= with your model configuration before running Mini-A."
    }

- name : MiniAgent
  from :
  - CheckEnv
  check:
    in:
      goal           : isString
      mcp            : isString.default(__)
      verbose        : toBoolean.isBoolean.default(false)
      rpm            : toNumber.isNumber.default(__)
      rtm            : toNumber.isNumber.default(__)
      tpm            : toNumber.isNumber.default(__)
      maxsteps       : toNumber.isNumber.default(15)
      maxcontext     : toNumber.isNumber.default(0)
      readwrite      : toBoolean.isBoolean.default(false)
      debug          : toBoolean.isBoolean.default(false)
      useshell       : toBoolean.isBoolean.default(false)
      shell          : isString.default(__)
      knowledge      : isString.default(__)
      outfile        : isString.default(__)
      libs           : isString.default(__)
      model          : isString.default(__)
      modellc        : isString.default(__)
      conversation   : isString.default(__)
      format         : isString.default(__)
      raw            : toBoolean.isBoolean.default(false)
      shellallow     : isString.default(__)
      shellbanextra  : isString.default(__)
      shellallowpipes: toBoolean.isBoolean.default(false)
      shellbatch     : toBoolean.isBoolean.default(false)
      toolcachettl   : toNumber.isNumber.default(__)
      usetools       : toBoolean.isBoolean.default(false)
      useutils       : toBoolean.isBoolean.default(false)
      mcpdynamic     : toBoolean.isBoolean.default(false)
      mcplazy        : toBoolean.isBoolean.default(false)
      useplanning    : toBoolean.isBoolean.default(false)
      planmode       : toBoolean.isBoolean.default(false)
      plan           : isString.default(__)
      planfile       : isString.default(__)
      chatbotmode    : toBoolean.isBoolean.default(false)
      rules          : isString.default(__)
      state          : isString.default(__)
      auditch        : isString.default(__)
  exec : | #js
    log(`ðŸŽ¯ goal: ${args.goal}`)
    var _ma = new MiniA()
    if (isUnDef(args.format)) args.format = "md"
    if (isUnDef(args.__format) && isDef(args.format)) args.__format = args.format
    _ma.init(args)
    var _r = _ma.start(args)
    if (isUnDef(args.outfile)) {
      if (isObject(_r)) 
        ow.oJob.output(_r, args)
      else
        print(_r)
    }
