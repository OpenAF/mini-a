# Author: Nuno Aguiar
help:
  text   : |
    A mini autonomous agent that uses an LLM (use OAF_MODEL environment variable) and shell commands to achieve a specified goal in small steps.

    Examples:
      # Single MCP connection
      ojob mini-a.yaml goal="..." mcp="(cmd: 'docker run --rm -i mcp/dockerhub', timeout: 5000)" rtm=20
      ojob mini-a.yaml goal="..." mcp="(cmd: 'docker run --rm -i mcp/wikipedia-mcp', timeout: 5000)" rtm=20 knowledge="give final answer in markdown"
      
      # Multiple MCP connections
      ojob mini-a.yaml goal="..." mcp="[(cmd: 'docker run --rm -i mcp/dockerhub', timeout: 5000) | (cmd: 'docker run --rm -i mcp/wikipedia-mcp', timeout: 5000)]" rtm=20
      
  expects: 
  - name     : goal
    desc     : Goal for the agent to achieve
    example  : aValueExample
    mandatory: true
  - name     : mcp
    desc     : A MCP connection object (or array of objects) using OpenAF's $mcp() function in SLON or JSON format
    example  : "(url: 'http://127.0.0.1:17879/mcp', type: remote, debug: false)"
    mandatory: false
  - name     : verbose
    desc     : Whether to print detailed logs
    example  : "true"
    mandatory: false
  - name     : maxsteps
    desc     : Maximum number of steps to take
    example  : "25"
    mandatory: false
  - name     : rtm
    desc     : Rate of messages per minute
    example  : "20"
    mandatory: false
  - name     : readwrite
    desc     : Allow read-write commands without confirmation (dangerous)
    example  : "false"
    mandatory: false
  - name     : checkall
    desc     : Check all commands for banned operations (may ask for confirmation)
    example  : "true"
    mandatory: false
  - name     : useshell
    desc     : "Whether to allow shell commands (default: true)"
    example  : "true"
    mandatory: false
  - name     : outfile
    desc     : Output file path to save the final answer (if not provided, prints to console)
    example  : "/path/to/output.txt"
    mandatory: false
  - name     : knowledge
    desc     : Additional knowledge or context to provide to the agent (in the form of a string or a path to a text file)
    example  : "You have access to a Linux shell and can run commands like ls, cat, grep, wc, curl, etc."
    mandatory: false
  - name     : conversation
    desc     : Conversation history file to provide to the agent
    example  : "/path/to/conversation.json"
    mandatory: false
  - name     : libs
    desc     : Comma-separated list of additional OJob libraries to load (e.g., "lib1,lib2")
    example  : "lib1,lib2"
    mandatory: false
  - name     : maxcontent
    desc     : Maximum content length to consider from files (in characters)
    example  : "200000"
    mandatory: false
  - name     : raw
    desc     : Whether to return raw output without formatting
    example  : "false"
    mandatory: false
  - name     : debug
    desc     : Enable debug mode
    example  : "false"
    mandatory: false

todo:
- MiniAgent

ojob:
  opacks      :
  - openaf: 20250725
  - mini-a
  catch       : printErrnl("[" + job.name + "] "); $err(exception, __, __, job.exec)
  logToConsole: false   # to change when finished
  loadLibs    :
  - mini-a.js

jobs:
# ----------------
- name : MiniAgent
  check:
    in:
      goal        : isString
      mcp         : isString.default(__)
      verbose     : toBoolean.isBoolean.default(false)
      rtm         : toNumber.isNumber.default(__)
      maxsteps    : toNumber.isNumber.default(25)
      readwrite   : toBoolean.isBoolean.default(false)
      debug       : toBoolean.isBoolean.default(false)
      useshell    : toBoolean.isBoolean.default(false)
      knowledge   : isString.default("")
      outfile     : isString.default(__)
      libs        : isString.default("")
      conversation: isString.default(__)
  exec : | #js
    var ma = new MiniA()
    ma.init(args)
    if (isUnDef(args.__format)) args.__format = "md"
    var _r = ma.start(args)
    if (isUnDef(args.outfile)) {
      if (isObject(_r)) 
        ow.oJob.output(_r, args)
      else
        print(_r)
    }