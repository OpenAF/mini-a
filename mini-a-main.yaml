# Author: Nuno Aguiar
help:
  text   : |
    Main entry point for the Mini-A autonomous agent. By default it runs the CLI agent; set `web=true` to launch the HTTP interface for interactive conversations.

    CLI examples:
      # Single MCP connection
      ojob mini-a-main.yaml goal="..." mcp="(cmd: 'docker run --rm -i mcp/dockerhub', timeout: 5000)" rpm=20
      ojob mini-a-main.yaml goal="..." mcp="(cmd: 'docker run --rm -i mcp/wikipedia-mcp', timeout: 5000)" rpm=20 knowledge="give final answer in markdown"

      # Multiple MCP connections
      ojob mini-a-main.yaml goal="..." mcp="[(cmd: 'docker run --rm -i mcp/dockerhub', timeout: 5000) | (cmd: 'docker run --rm -i mcp/wikipedia-mcp', timeout: 5000)]" rpm=20

    Web example:
      ojob mini-a-main.yaml web=true onport=8888 showExecs=false
  expects:
  - name     : web
    desc     : Run the Mini-A web interface when true; otherwise start the CLI agent
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : goal
    desc     : Goal for the agent to achieve (CLI mode)
    example  : aValueExample
    mandatory: false
  - name     : mcp
    desc     : MCP connection object (or array) using OpenAF's $mcp() in SLON or JSON format (CLI mode)
    example  : "(url: 'http://127.0.0.1:17879/mcp', type: remote, debug: false)"
    mandatory: false
  - name     : verbose
    desc     : Whether to print detailed logs (CLI mode)
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : maxsteps
    desc     : Maximum number of steps to take (CLI mode)
    example  : "25"
    mandatory: false
  - name     : rpm
    desc     : Maximum number of LLM requests per minute (CLI mode)
    example  : "20"
    mandatory: false
  - name     : tpm
    desc     : Maximum number of LLM tokens per minute across prompt and completion (CLI mode)
    example  : "80000"
    mandatory: false
  - name     : readwrite
    desc     : Allow read-write commands without confirmation (dangerous, CLI mode)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : checkall
    desc     : Check all commands for banned operations (may ask for confirmation, CLI mode)
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : useshell
    desc     : Whether to allow shell commands (CLI mode)
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : shellallow
    desc     : Comma-separated list of banned commands to allow explicitly (CLI mode)
    example  : "curl,wget"
    mandatory: false
  - name     : shellallowpipes
    desc     : Allow pipes, redirection and shell control operators (CLI mode)
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : shellbanextra
    desc     : Additional comma-separated commands to ban (CLI mode)
    example  : "lsblk,ifconfig"
    mandatory: false
  - name     : outfile
    desc     : Output file path to save the final answer (if not provided, prints to console, CLI mode)
    example  : "/path/to/output.txt"
    mandatory: false
  - name     : knowledge
    desc     : Additional knowledge or context to provide (string or path, CLI mode)
    example  : "You have access to a Linux shell and can run commands like ls, cat, grep, wc, curl, etc."
    mandatory: false
  - name     : conversation
    desc     : Conversation history file to provide to the agent (CLI mode)
    example  : "/path/to/conversation.json"
    mandatory: false
  - name     : libs
    desc     : Comma-separated list of additional OJob libraries to load (CLI mode)
    example  : "lib1,lib2"
    mandatory: false
  - name     : maxcontext
    desc     : Maximum context size in tokens before conversations are summarized (CLI and web modes)
    example  : "200000"
    mandatory: false
  - name     : raw
    desc     : Return raw output without formatting (CLI mode)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : debug
    desc     : Enable debug mode (CLI mode)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : shellbatch
    desc     : Run in batch mode without prompting for command execution approval (CLI mode)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : usetools
    desc     : Register MCP tools directly on the model instead of expanding the prompt with schemas (CLI mode)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : mcpdynamic
    desc     : Enable dynamic tool selection instead of registering all MCP tools (analyzes goal to select relevant tools, CLI mode)
    example  : "false"
    mandatory: false
    options  : ["true", "false"]
  - name     : useplanning
    desc     : Enable task planning updates (agent mode only, CLI mode)
    example  : "true"
    mandatory: false
    options  : ["true", "false"]
  - name     : rules
    desc     : Custom rules or instructions for the agent (JSON or SLON array of strings, CLI mode)
    example  : '["Always provide detailed explanations", "Use concise language"]'
    mandatory: false
  - name     : state
    desc     : Initial state data to provide to the agent as structured JSON/SLON (CLI mode)
    example  : '{"current_task": "analysis", "progress": 0}'
    mandatory: false
  - name     : onport
    desc     : Port to run the HTTP server on (web mode)
    example  : "8888"
    mandatory: false
  - name     : showExecs
    desc     : Show executed commands in the interaction (web mode)
    example  : "false"
    mandatory: false
  - name     : logPromptHeaders
    desc     : Log request headers (comma-separated) when receiving prompts (web mode)
    example  : "origin,referer"
    mandatory: false
  - name     : usehistory
    desc     : Enable or disable history management (default true, web mode)
    example  : "true"
    mandatory: false

ojob:
  argsFromEnvs: true

todo:
- (if    ): |
    toBoolean(args.web) || toBoolean(args.onport) == true
  ((then)):
  - start-web
  ((else)):
  - start-cli

jobs:
# ---------------
- name: start-web
  exec: | #js
    oJobRunFile(getOPackPath("mini-a") + "/mini-a-web.yaml", args, genUUID(), __, false)

# ---------------
- name: start-cli
  exec: | #js
    oJobRunFile(getOPackPath("mini-a") + "/mini-a.yaml", args, genUUID(), __, false)
